# This is a sample INI configuration for a kernel.
# It includes explanations for unimplemented configs such as:
# - config_fragment.Priority: Defines the order in which configuration fragments are applied.

[info]
# Full name of the kernel.
Name=Sample Kernel for ExampleDevice

# SimpleName provides a shortened version of the kernel name for easier reference.
SimpleName=SampleKernel

# URL of the repository containing the kernel source code.
RepoUrl=https://github.com/example/kernel-repo

# The branch of the repository to be used.
RepoBranch=example-branch

# Architecture of the kernel (e.g., ARM64, x86_64).
KernelArch=ARM64

# Type of the kernel image being built (e.g., Image, zImage).
KernelType=Image.gz-dtb

# Toolchain support of the kernel. Supported values are: GCCOnly, GNUBinClang, FullLLVM, FullLLVMWithIAS
# GCCOnly: The kernel needs pure GCC toolchain and binutils.
# GNUBinClang: The kernel needs GCC binutils but can use clang as CC.
# FullLLVM: The kernel can be compiled with clang and full LLVM binutils.
# FullLLVMWithIAS: Same as above, but LLVM=1 and LLVM_IAS=1 is supported by the kernel.
ToolchainConfig=FullLLVM

# A list of additional environment variables sperated by comma with key=value. optional
Env=SOME=1,YES=0

[anykernel3]

# AnyKernel3 directory in the kernel relative to the kernel root.
# If none specified, kernel zip creation is skipped.
Directory=path/to/anyKernel3

# Additional files to include to the zip.
# Default list is:
# META-INF/com/google/android/update-binary
# META-INF/com/google/android/updater-script
# tools/ak3-core.sh
# tools/busybox
# tools/magiskboot
# anykernel.sh
# And the kernel binary.
AdditionalFiles=version

[defconfig]
# NamingScheme defines the naming pattern for the defconfig file.
# The {device} placeholder will be replaced by the actual device name.
NamingScheme=vendor/{device}_defconfig

# Devices lists all supported devices for this kernel build.
Devices=device1,device2,device3


# Configuration fragments allow for specific settings or features to be applied during the build.

[config_fragment_core]
# NamingScheme defines the path and name of the core configuration fragment.
NamingScheme=vendor/core.config

# Description provides an explanation of what this fragment does.
Description=Enable core kernel features

# Default indicates whether this fragment is applied automatically ('on') or manually ('off').
Default=on

# Priority determines the order in which fragments are applied, with lower values being applied first.
Priority=0


[config_fragment_device_specific]
# NamingScheme for device-specific configurations.
# The {device} placeholder will be replaced by the actual device name.
NamingScheme=vendor/{device}_specific.config

# Description explains that this fragment contains settings specific to each device.
Description=Device-specific configurations

# Default indicates that this fragment is applied automatically.
Default=off

# Priority defines the order, this fragment will be applied after the core settings.
Priority=1


[config_fragment_optional]
# NamingScheme for an optional configuration fragment, which may enable additional features.
NamingScheme=vendor/optional.config

# Description explains that this fragment enables optional features.
Description=Enable optional kernel features

# Default is set to 'off', meaning this fragment will not be applied automatically.
Default=off

# Priority defines the order, applied after core and device-specific configurations if selected.
Priority=2
